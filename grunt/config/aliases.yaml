default:
  description: 'Default task for grunt. Spits out some info about your JS then kicks off a watch.'
  tasks:
    - 'babel'
    - 'audit'
    - 'lint-lax' # don't want this to fail hard, or the watch won't run
    - 'watch:default'

############################
# Tasks for Focusing on a particular task
############################
o-lint:
  description: 'Watch files and run tasks specific to linting.'
  tasks:
    - 'babel'
    - 'lint-lax'
    - 'watch:_lint_optimized'

o-docs:
  description: 'Watch files and run tasks specific to writing documentation.'
  tasks:
    - 'babel'
    - 'jsdoc'
    - 'lint-lax'
    - 'watch:_docs_optimized'

o-test:
  description: 'Watch files and run tasks specific to testing.'
  tasks:
    - 'babel'
    - 'watch:_test_optimized'

# if you rename this task, you need to update the string in grunt/config/watch.js
_js_o_lint_on_watch:
  - 'beautify'
  - 'babel'
  - 'lint'
  - 'test'
  - 'jsdoc'

# if you rename this task, you need to update the string in grunt/config/watch.js
_js_o_test_on_watch:
  - 'beautify'
  - 'babel'
  - 'lint-lax'
  - 'test'
  - 'jsdoc'

# if you rename this task, you need to update the string in grunt/config/watch.js
_js_o_docs_on_watch:
  - 'beautify'
  - 'babel'
  - 'jsdoc'
  - 'lint'
  - 'test'

############################
# Helper tasks
############################

# if you rename this task, you need to update the string in grunt/config/watch.js
_js_on_watch:       # Run when the JS changes
  description: 'These tasks get run when the watch task fires for the JavaScript.'
  tasks:
    - 'babel'      # Keep first to compile quick
    - 'beautify'
    - 'lint-lax'
    - 'test'
    - 'jsdoc'

beautify:
  description: 'Beautify the JS. (jsbeautifier,jscs)'
  tasks:
    - 'jsbeautifier:act'
    - 'jscs:act'

lint:
  description: 'Make sure the JS checks out.'
  tasks:
    - 'jsbeautifier:strict'
    - 'jshint:strict'
    - 'jscs:strict'

lint-lax:
  description: 'Lax version of the lint task.'
  tasks:
    - 'jshint:lax'
    - 'jscs:lax'
    # - 'jsbeautifier:lax' # no way to lint and have this task succeed on error :(

audit:             # Audit the code, see how we're doing
- 'todo'
- 'dry-js'

test:              # Unit tests!
- 'babel'
- 'shell:test'

############################
# Tasks called via git hooks
############################

# The following hooks will allow the user to commit JS that fails linting,
# however will not permit them to push code with jshint issues.

pre-push:
  description: 'Ensure that there are no build or workflow-breaking issues.'
  tasks:
    - 'test'
    - 'lint'

# pre-commit:
# description: 'TODO: Do we want something like this?'
# tasks:
#   - 'jsbeautiier:act'

post-commit:
  description: 'Inform the dev about the current state of the branch. This will spit out jshint errors, but not fail if present.'
  tasks:
    - 'audit'
    - 'lint-lax'
